#set($elements = $property.variables.newVariable("Elements"))
#set($elementType = $property.elementType.qualifiedSourceName)
#set($valueType = $property.valueType.qualifiedSourceName)
#set($collectionImplementation = $TypeUtils.collectionImplementationFor($property.type.qualifiedSourceName))
#newConcreteTypes()
#set($nodeValue = $property.variables.newVariable("NodeValue"))
Node $nodeValue = element.selectNode("$property.pathOrName");
List<Element> $elements = filterElements(${nodeValue}.selectNodes("entry"));
$value = new $collectionImplementation<$elementType, $valueType>();
#if ($property.converter)
    #createConverter()
#end
for (Element mapElement : $elements)
{
    $elementType key = null;
    $valueType value = null;
    {
        $elementType currentValue = null;
        Element currentElement = (Element)((Element)mapElement.selectNode("key")).getFirstChild();
        System.out.print("Key : ");
        System.out.println(currentElement);
        #parse($property.templates.elementType)
        key = currentValue;
    }
    {
        $valueType currentValue = null;
        Element currentElement = (Element)((Element)mapElement.selectNode("value")).getFirstChild();
        System.out.print("Value : ");
        System.out.println(currentElement);
        #parse($property.templates.valueType)
        value = currentValue;
    }
    System.out.println(PojoObject.WRITER.toXml(key));
    System.out.println(PojoObject.WRITER.toXml(value));
    ${value}.put(key, value);
}
